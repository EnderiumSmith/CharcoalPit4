package charcoalPit.tile;import charcoalPit.DataComponents.BloomData;import charcoalPit.core.DataComponentRegistry;import charcoalPit.core.TileEntityRegistry;import net.minecraft.core.BlockPos;import net.minecraft.core.HolderLookup;import net.minecraft.nbt.CompoundTag;import net.minecraft.server.level.ServerLevel;import net.minecraft.world.Containers;import net.minecraft.world.entity.ExperienceOrb;import net.minecraft.world.item.ItemStack;import net.minecraft.world.item.Items;import net.minecraft.world.level.block.entity.BlockEntity;import net.minecraft.world.level.block.state.BlockState;public class TileBloom extends BlockEntity {    public int workCount;    public TileBloom(BlockPos pos, BlockState blockState) {        super(TileEntityRegistry.BLOOM.get(), pos, blockState);        workCount=0;    }    public void dropInventory(int fortune){        BloomData contents=this.components().get(DataComponentRegistry.BLOOM_DATA.get());        fortune=Math.min(3,fortune);        int base=3+fortune*2;        int chance=7-fortune*2;        if(contents!=null) {            if(contents.stack().getItem()== Items.IRON_INGOT){                for(int i=0;i<contents.stack().getCount();i++){                    Containers.dropItemStack(level, getBlockPos().getX(), getBlockPos().getY(), getBlockPos().getZ(), new ItemStack(Items.IRON_NUGGET,base+level.random.nextInt(chance)));                }            }else                Containers.dropItemStack(level, getBlockPos().getX(), getBlockPos().getY(), getBlockPos().getZ(), contents.stack().copy());            if(contents.xp()>0) {                ExperienceOrb.award((ServerLevel) level, getBlockPos().getCenter(), (int) contents.xp());                if (level.getRandom().nextFloat() < (contents.xp() - (int) contents.xp())) {                    ExperienceOrb.award((ServerLevel) level, getBlockPos().getCenter(), 1);                }            }        }    }    @Override    protected void saveAdditional(CompoundTag tag, HolderLookup.Provider registries) {        super.saveAdditional(tag, registries);        tag.putInt("workCount",workCount);    }    @Override    protected void loadAdditional(CompoundTag tag, HolderLookup.Provider registries) {        super.loadAdditional(tag, registries);        workCount=tag.getInt("workCount");    }}